<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.littlebug.dao.TechnologyRequirementMapper">
  <resultMap id="BaseResultMap" type="com.littlebug.bean.TechnologyRequirement">
    <id column="technology_requirement_id" jdbcType="VARCHAR" property="technologyRequirementId" />
    <result column="technology_id" jdbcType="VARCHAR" property="technologyId" />
    <result column="requirement" jdbcType="VARCHAR" property="requirement" />
    <result column="add_time" jdbcType="TIMESTAMP" property="addTime" />
    <result column="revise_time" jdbcType="TIMESTAMP" property="reviseTime" />
    <association column="technology_id" property="technologyName" select="com.littlebug.dao.TechnologyMapper.selectTechnologyNameByPrimaryKey"/>
  </resultMap>
  <sql id="Base_Column_List">
    technology_requirement_id, technology_id, requirement, add_time, revise_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from technology_requirement
    where technology_requirement_id = #{technologyRequirementId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from technology_requirement
    where technology_requirement_id = #{technologyRequirementId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.littlebug.bean.TechnologyRequirement">
    insert into technology_requirement (technology_requirement_id, technology_id, 
      requirement, add_time, revise_time
      )
    values (#{technologyRequirementId,jdbcType=VARCHAR}, #{technologyId,jdbcType=VARCHAR}, 
      #{requirement,jdbcType=VARCHAR}, #{addTime,jdbcType=TIMESTAMP}, #{reviseTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.littlebug.bean.TechnologyRequirement">
    insert into technology_requirement
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="technologyRequirementId != null">
        technology_requirement_id,
      </if>
      <if test="technologyId != null">
        technology_id,
      </if>
      <if test="requirement != null">
        requirement,
      </if>
      <if test="addTime != null">
        add_time,
      </if>
      <if test="reviseTime != null">
        revise_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="technologyRequirementId != null">
        #{technologyRequirementId,jdbcType=VARCHAR},
      </if>
      <if test="technologyId != null">
        #{technologyId,jdbcType=VARCHAR},
      </if>
      <if test="requirement != null">
        #{requirement,jdbcType=VARCHAR},
      </if>
      <if test="addTime != null">
        #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="reviseTime != null">
        #{reviseTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.littlebug.bean.TechnologyRequirement">
    update technology_requirement
    <set>
      <if test="technologyId != null">
        technology_id = #{technologyId,jdbcType=VARCHAR},
      </if>
      <if test="requirement != null">
        requirement = #{requirement,jdbcType=VARCHAR},
      </if>
      <if test="addTime != null">
        add_time = #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="reviseTime != null">
        revise_time = #{reviseTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where technology_requirement_id = #{technologyRequirementId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.littlebug.bean.TechnologyRequirement">
    update technology_requirement
    set technology_id = #{technologyId,jdbcType=VARCHAR},
      requirement = #{requirement,jdbcType=VARCHAR},
      add_time = #{addTime,jdbcType=TIMESTAMP},
      revise_time = #{reviseTime,jdbcType=TIMESTAMP}
    where technology_requirement_id = #{technologyRequirementId,jdbcType=VARCHAR}
  </update>

  <select id="findAllTechnologyRequirements" resultMap="BaseResultMap">
      select
      <include refid="Base_Column_List"/>
      from technology_requirement limit #{rows} offset #{page}
  </select>

  <update id="delete_batch" >
    delete from technology_requirement
    where technology_requirement_id in (
    <foreach collection="array" item="split" separator=",">
      #{split}
    </foreach>
    )
  </update>


  <select id="search_technologyRequirement_by_technologyRequirementId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from technology_requirement
    <if test=" searchValue != null">
      where technology_requirement_id like #{searchValue}
    </if>
  </select>

  <select id="search_technologyRequirement_by_technologyName" resultType="technologyRequirement">
    select
    tr.technology_requirement_id as technologyRequirementId,
    tr.technology_id as technologyId,
    tr.requirement as requirement,
    tr.add_time as addTime,
    tr.revise_time as reviseTime,
    t.technology_name as technologyName
    from technology_requirement tr
    inner join technology t
    on tr.technology_id = t.technology_id
    <if test=" searchValue != null">
      where t.technology_name like #{searchValue}
    </if>
  </select>



</mapper>